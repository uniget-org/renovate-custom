name: docker-desktop

on:
  schedule:
  - cron: "47 3 * * *"
  push:
    branches:
    - main
    paths:
    - .github/workflows/docker-desktop.yml
  workflow_dispatch:

concurrency:
  group: docker-desktop

jobs:

  desktop:
    name: docker-desktop
    runs-on: ubuntu-22.04
    permissions:
      contents: write
    outputs:
      version: ${{ steps.fetch.outputs.version }}
    steps:

    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install uniget
      uses: uniget-org/uniget-action@main
      with:
        prefix: helper
        tools: gojq

    - name: Fetch
      id: fetch
      run: |
        VERSION="$(
            curl --silent --show-error --location --fail "https://github.com/docker/docs/raw/main/content/desktop/release-notes.md" \
            | grep '{{< desktop-install ' \
            | head -n 1 \
            | sed -E 's/^.+version="([^"]+)".+$/\1/'
        )"

        echo "version=${VERSION}" >>${GITHUB_OUTPUT}

    - name: Release
      uses: ncipollo/release-action@v1
      with:
        token: ${{ secrets.BOT_GITHUB_TOKEN }}
        allowUpdates: true
        name: "docker-desktop v${{ steps.fetch.outputs.version }}"
        tag: docker-desktop/${{ steps.fetch.outputs.version }}
        draft: false
        prerelease: false

  init:
    name: docker-init
    needs: desktop
    runs-on: ubuntu-22.04
    permissions:
      contents: write
    steps:

    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install uniget
      uses: uniget-org/uniget-action@main
      with:
        prefix: helper
        tools: docker-init

    - name: Install tool
      run: |
        VERSION="{{ needs.desktop.outputs.version }}" ./helper/usr/local/bin/install-docker-init.sh .

    - name: Fetch version
      id: fetch
      run: |
        VERSION="$(
            ./libexec/docker/cli-plugins/docker-init init --version \
            | grep ^Version \
            | cut -dv -f2
        )"

        echo "version=${VERSION}" >>${GITHUB_OUTPUT}

    - name: Release
      uses: ncipollo/release-action@v1
      with:
        token: ${{ secrets.BOT_GITHUB_TOKEN }}
        allowUpdates: true
        name: "docker-init v${{ steps.fetch.outputs.version }}"
        tag: docker-init/${{ steps.fetch.outputs.version }}
        draft: false
        prerelease: false
        body: |
          docker-desktop@${{ needs.desktop.outputs.version }}

  debug:
    name: docker-debug
    needs: desktop
    runs-on: ubuntu-22.04
    permissions:
      contents: write
    steps:

    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install uniget
      uses: uniget-org/uniget-action@main
      with:
        prefix: helper
        tools: docker-debug

    - name: Overwrite script
      run: |
        find . -type f
        cat <<"EOF" >./helper/usr/local/bin/install-docker-debug.sh
        #!/bin/bash
        set -o errexit -o pipefail

        target="${1:-/usr/local}"
        : "${docker_desktop_version:=4.29.0}"
        echo "Using Docker Desktop version ${docker_desktop_version}"
        docker_desktop_build="$(
            curl --silent --show-error --location --fail "https://github.com/docker/docs/raw/main/content/desktop/release-notes.md" \
            | grep "{{< desktop-install all=true version=\"${docker_desktop_version}\" " \
            | sed -E 's|^.+build_path="/([0-9]+)/".+$|\1|'
        )"
        if test -z "${docker_desktop_build}"; then
            echo "Failed to find build for Docker Desktop version ${docker_desktop_version}"
            exit 1
        fi
        echo "Using Docker Desktop version ${docker_desktop_version} build ${docker_desktop_build}"

        TEMP_DIR="$(mktemp -d)"
        trap "rm -rf ${TEMP_DIR}" EXIT

        curl --location --fail --output "${TEMP_DIR}/docker-desktop-${docker_desktop_version}-amd64.deb" "https://desktop.docker.com/linux/main/amd64/${docker_desktop_build}/docker-desktop-${docker_desktop_version}-amd64.deb"
        ar -x "${TEMP_DIR}/docker-desktop-${docker_desktop_version}-amd64.deb" data.tar.xz --output "${TEMP_DIR}"
        rm "${TEMP_DIR}/docker-desktop-${docker_desktop_version}-amd64.deb"

        echo "Extracting to ${target}/libexec/docker/cli-plugins"
        mkdir -p "${target}/libexec/docker/cli-plugins"
        tar --extract --xz --file "${TEMP_DIR}/data.tar.xz" --directory "${target}/libexec/" --strip-components=3 --no-same-owner \
            ./usr/lib/docker/cli-plugins/docker-debug
        EOF

    - name: Install tool
      run: |
        cat ./helper/usr/local/bin/install-docker-init.sh
        docker_desktop_version="{{ needs.desktop.outputs.version }}" bash -x -e ./helper/usr/local/bin/install-docker-debug.sh .
        find . -type f

    - name: Fetch version
      id: fetch
      run: |
        VERSION="$(
            ./libexec/docker/cli-plugins/docker-debug debug --version \
            | grep ^Version \
            | cut -d' ' -f2
        )"

        echo "version=${VERSION}" >>${GITHUB_OUTPUT}

    - name: Release
      uses: ncipollo/release-action@v1
      with:
        token: ${{ secrets.BOT_GITHUB_TOKEN }}
        allowUpdates: true
        name: "docker-debug v${{ steps.fetch.outputs.version }}"
        tag: docker-debug/${{ steps.fetch.outputs.version }}
        draft: false
        prerelease: false
        body: |
          docker-desktop@${{ needs.desktop.outputs.version }}