spec:
  inputs:
    name:
      type: string
      description: The name of the tool
    command:
      type: string
      description: The command to determine the version of the tool
    rules:
      type: array
      description: The rules to trigger the pipeline
---
.$[[ inputs.name ]]-rules:
  rules: $[[ inputs.rules ]]

$[[ inputs.name ]]-check:
  extends:
  - .$[[ inputs.name ]]-rules
  image: registry.gitlab.com/uniget-org/images/ubuntu:rolling
  script:
  - |
    VERSION="$(
        $[[ inputs.command ]]
    )"
    if test -z "${VERSION}"; then
        echo "Failed to fetch latest tag and extract version from GitHub"
        exit 1
    fi
    echo "Got version <${VERSION}>"

    echo "VERSION=${VERSION}" >>variables.env
  artifacts:
    reports:
      dotenv: variables.env

$[[ inputs.name ]]-release:
  extends:
  - .$[[ inputs.name ]]-rules
  needs:
  - $[[ inputs.name ]]-check
  image: registry.gitlab.com/gitlab-org/release-cli:v0.19.0
  script:
  - |
    echo "### Releasing $[[ inputs.name ]] v${VERSION}"
    if release-cli get --tag-name $[[ inputs.name ]]/${VERSION}; then
        echo "    Already exists"
        exit 0

    else
        release-cli create \
            --name "$[[ inputs.name ]] v${VERSION}" \
              --description "Custom release of $[[ inputs.name ]] v${VERSION}" \
              --tag-name "$[[ inputs.name ]]/${VERSION}" \
              --ref "${CI_COMMIT_SHA}"
    fi
