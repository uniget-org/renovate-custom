workflow:
  rules:
  - if: $CI_PIPELINE_SOURCE == "push"
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULED_PIPELINE == "true"

include:
- component: $CI_SERVER_FQDN/$CI_PROJECT_PATH/custom-release@$CI_COMMIT_SHA
  inputs:
    name: docker-desktop
    command: |
      curl --silent --show-error --location --fail \
          "https://github.com/docker/docs/raw/main/content/manuals/desktop/release-notes.md" \
      | grep '{{< desktop-install-v2 all=true' \
      | head -n 1 \
      | sed -E 's/^.+version="([^"]+)".+$/\\1/'

- component: $CI_SERVER_FQDN/$CI_PROJECT_PATH/custom-release@$CI_COMMIT_SHA
  inputs:
    name: docker-init
    needs:
    - docker-desktop-release
    command: |
      DD_VERSION="$(
          curl -sSfH "Job-Token: ${CI_JOB_TOKEN}" "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/releases?per_page=100" \
          | jq -r '.[].tag_name' \
          | grep ^docker-desktop/ \
          | head -n 1 \
          | cut -d/ -f2
      )"
      curl -sLf https://github.com/uniget-org/cli/releases/latest/download/uniget_Linux_$(uname -m).tar.gz \
      | tar -xzC /usr/local/bin uniget >&2
      uniget --prefix=helper install docker-init >&2
      docker_desktop_version="${DD_VERSION}" bash -x -e ./helper/usr/local/bin/install-docker-init.sh . >&2
      VERSION="$(
          ./libexec/docker/cli-plugins/docker-init init --version \
          | grep ^Version \
          | cut -dv -f2
      )"
      if test -z "${VERSION}"; then
          echo "Unable to get version" >&2
          exit 1
      fi
      echo "${VERSION}-${DD_VERSION}"

- component: $CI_SERVER_FQDN/$CI_PROJECT_PATH/custom-release@$CI_COMMIT_SHA
  inputs:
    name: docker-debug
    needs:
    - docker-desktop-release
    command: |
      DD_VERSION="$(
          curl -sSfH "Job-Token: ${CI_JOB_TOKEN}" "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/releases?per_page=100" \
          | jq -r '.[].tag_name' \
          | grep ^docker-desktop/ \
          | head -n 1 \
          | cut -d/ -f2
      )"
      curl -sLf https://github.com/uniget-org/cli/releases/latest/download/uniget_Linux_$(uname -m).tar.gz \
      | tar -xzC /usr/local/bin uniget >&2
      uniget --prefix=helper install docker-debug >&2
      docker_desktop_version="${DD_VERSION}" bash -x -e ./helper/usr/local/bin/install-docker-debug.sh . >&2
      VERSION="$(
          ./libexec/docker/cli-plugins/docker-debug debug --version \
          | grep ^Version \
          | cut -d' ' -f2
      )"
      if test -z "${VERSION}"; then
          echo "Unable to get version" >&2
          exit 1
      fi
      echo "${VERSION}-${DD_VERSION}"

- component: $CI_SERVER_FQDN/$CI_PROJECT_PATH/custom-release@$CI_COMMIT_SHA
  inputs:
    name: docker-dev
    needs:
    - docker-desktop-release
    command: |
      DD_VERSION="$(
          curl -sSfH "Job-Token: ${CI_JOB_TOKEN}" "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/releases?per_page=100" \
          | jq -r '.[].tag_name' \
          | grep ^docker-desktop/ \
          | head -n 1 \
          | cut -d/ -f2
      )"
      curl -sLf https://github.com/uniget-org/cli/releases/latest/download/uniget_Linux_$(uname -m).tar.gz \
      | tar -xzC /usr/local/bin uniget >&2
      uniget --prefix=helper install docker-dev >&2
      docker_desktop_version="${DD_VERSION}" bash -x -e ./helper/usr/local/bin/install-docker-dev.sh . >&2
      VERSION="$(
          ./libexec/docker/cli-plugins/docker-dev dev version \
          | grep ^Version \
          | cut -dv -f2
      )"
      if test -z "${VERSION}"; then
          echo "Unable to get version" >&2
          exit 1
      fi
      echo "${VERSION}-${DD_VERSION}"

- component: $CI_SERVER_FQDN/$CI_PROJECT_PATH/custom-release@$CI_COMMIT_SHA
  inputs:
    name: docker-ai
    needs:
    - docker-desktop-release
    command: |
      DD_VERSION="$(
          curl -sSfH "Job-Token: ${CI_JOB_TOKEN}" "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/releases?per_page=100" \
          | jq -r '.[].tag_name' \
          | grep ^docker-desktop/ \
          | head -n 1 \
          | cut -d/ -f2
      )"
      curl -sLf https://github.com/uniget-org/cli/releases/latest/download/uniget_Linux_$(uname -m).tar.gz \
      | tar -xzC /usr/local/bin uniget >&2
      uniget --prefix=helper install docker-ai >&2
      docker_desktop_version="${DD_VERSION}" bash -x -e ./helper/usr/local/bin/install-docker-ai.sh . >&2
      VERSION="$(
          ./libexec/docker/cli-plugins/docker-ai ai version \
          | tr -d v
      )"
      if test -z "${VERSION}"; then
          echo "Unable to get version" >&2
          exit 1
      fi
      echo "${VERSION}-${DD_VERSION}"

- component: $CI_SERVER_FQDN/$CI_PROJECT_PATH/custom-release@$CI_COMMIT_SHA
  inputs:
    name: floodgate
    command: |
      curl -sSLf https://download.geysermc.org/v2/projects/floodgate \
      | jq --raw-output '.versions[-1]' \
      | xargs -I{} \
          curl -sSLf https://download.geysermc.org/v2/projects/floodgate/versions/{}/builds \
      | jq --raw-output '"\(.version).\(.builds | map(select(.channel == "default")) | .[-1].build)"'

- component: $CI_SERVER_FQDN/$CI_PROJECT_PATH/custom-release@$CI_COMMIT_SHA
  inputs:
    name: geyser
    command: |
      curl -sSLf https://download.geysermc.org/v2/projects/geyser \
      | jq --raw-output '.versions[-1]' \
      | xargs -I{} \
          curl -sSLf https://download.geysermc.org/v2/projects/geyser/versions/{}/builds \
      | jq --raw-output '"\(.version).\(.builds | map(select(.channel == "default")) | .[-1].build)"'

- component: $CI_SERVER_FQDN/$CI_PROJECT_PATH/custom-release@$CI_COMMIT_SHA
  inputs:
    name: k3s
    command: |
      curl --silent --show-error --location --fail \
          --url "https://api.github.com/repos/k3s-io/k3s/releases/latest" \
      | jq --raw-output '.tag_name' \
      | sed -E 's/^v([[:digit:]]+\\.[[:digit:]]+\\.[[:digit:]]+)\\+k3s([[:digit:]]+)$/\\1.\\2/'

- component: $CI_SERVER_FQDN/$CI_PROJECT_PATH/custom-release@$CI_COMMIT_SHA
  inputs:
    name: namespace
    command: |
      curl --silent --show-error --location --fail https://github.com/namespacelabs/homebrew-namespace/raw/main/nsc.rb \
      | grep version \
      | cut -d'"' -f2

- component: $CI_SERVER_FQDN/$CI_PROJECT_PATH/custom-release@$CI_COMMIT_SHA
  inputs:
    name: libgmp
    prerequisites: libxml2-utils
    command: |
      curl -sSLf https://ftp.gnu.org/gnu/gmp/ \
      | xmllint -html --xpath "//a/@href" - \
      | cut -d= -f2 \
      | tr -d '"' \
      | grep '.xz$' \
      | sed -E 's/^gmp-(.+)\\.tar\\.xz$/\\1/' \
      | sort -Vr \
      | head -n 1

- component: $CI_SERVER_FQDN/$CI_PROJECT_PATH/custom-release@$CI_COMMIT_SHA
  inputs:
    name: luckperms
    command: |
      LUCKPERMS_BUILD="$(
          curl --silent --show-error --location --fail "https://ci.lucko.me/job/LuckPerms/api/json?pretty=true" \
          | jq --raw-output '.builds[0].number'
      )"
      LUCKPERMS_VERSION="$(
          curl -sSLf "https://ci.lucko.me/job/LuckPerms/${LUCKPERMS_BUILD}/api/json?pretty=true" \
          | jq -r '.artifacts[] | select(.relativePath | contains("bukkit/")) | select(.relativePath | contains("-Bukkit-")) | .relativePath' \
          | cut -d/ -f5 \
          | cut -d- -f3 \
          | cut -d. -f1-3
      )"
      echo "${LUCKPERMS_VERSION}-${LUCKPERMS_BUILD}"

- component: $CI_SERVER_FQDN/$CI_PROJECT_PATH/custom-release@$CI_COMMIT_SHA
  inputs:
    name: minecraft-server
    command: |
      curl -sSLf https://launchermeta.mojang.com/mc/game/version_manifest.json \
      | jq --raw-output '.latest.release'

- component: $CI_SERVER_FQDN/$CI_PROJECT_PATH/custom-release@$CI_COMMIT_SHA
  inputs:
    name: nodejs-lts
    command: |
      curl --silent --location --fail https://github.com/nodejs/Release/raw/main/schedule.json \
      | jq -r 'to_entries[] | select(.value.maintenance > (now | todate)) | select(.value.lts != null) | select(.value.lts < (now | todate)) | .key' \
      | xargs -I{} \
          git ls-remote https://github.com/nodejs/node "refs/tags/{}.*" \
      | grep -v '\\^{}' \
      | cut -f2 | cut -d/ -f3 | tr -d v \
      | sort -Vr | head -1

- component: $CI_SERVER_FQDN/$CI_PROJECT_PATH/custom-release@$CI_COMMIT_SHA
  inputs:
    name: openjdk
    command: |
      curl --silent --show-error --location --fail \
          --url "https://api.adoptium.net/v3/info/available_releases" \
      | jq --raw-output '.available_releases | max' \
      | xargs -I{} \
          curl --silent --show-error --location --fail \
              --url "https://api.github.com/repos/adoptium/temurin{}-binaries/releases/latest" \
      | jq --raw-output '.tag_name' \
      | sed 's/^jdk-//' \
      | sed -E 's/^([[:digit:]]+\\.[[:digit:]]+\\.[[:digit:]]+)\\+([[:digit:]]+)$/\\1-\\2/'

- component: $CI_SERVER_FQDN/$CI_PROJECT_PATH/custom-release@$CI_COMMIT_SHA
  inputs:
    name: passage
    command: |
      git clone --quiet https://github.com/FiloSottile/passage
      echo "$(git -C passage rev-list --count --all).$(git -C passage rev-parse --short HEAD)"

- component: $CI_SERVER_FQDN/$CI_PROJECT_PATH/custom-release@$CI_COMMIT_SHA
  inputs:
    name: papermc
    command: |
      curl --silent --show-error --location --fail "https://api.papermc.io/v2/projects/paper" \
      | jq --raw-output '.version_groups[-1]' \
      | xargs -I{} \
          curl --silent --show-error --location --fail "https://api.papermc.io/v2/projects/paper/version_group/{}/builds" \
      | jq --raw-output '.builds | map(select(.channel == "default")) | .[-1] | "\(.version)-\(.build)"'

- component: $CI_SERVER_FQDN/$CI_PROJECT_PATH/custom-release@$CI_COMMIT_SHA
  inputs:
    name: python-3.12
    command: |
      curl --silent --show-error --location --fail \
          --url "https://api.github.com/repos/indygreg/python-build-standalone/releases/latest" \
      | jq --raw-output '.assets[].name' \
      | grep -E -- '-x86_64-unknown-linux-musl-install_only.tar.gz$' \
      | sed -E 's/^cpython-([^-]+)-.+$/\\1/' \
      | grep -P '^3\\.12\\.' \
      | sort -Vr \
      | head -n 1

- component: $CI_SERVER_FQDN/$CI_PROJECT_PATH/custom-release@$CI_COMMIT_SHA
  inputs:
    name: python
    command: |
      curl --silent --show-error --location --fail \
          --url "https://api.github.com/repos/indygreg/python-build-standalone/releases/latest" \
      | jq --raw-output '.assets[].name' \
      | grep -E -- '-x86_64-unknown-linux-musl-install_only.tar.gz$' \
      | sed -E 's/^cpython-([^-]+)-.+$/\\1/' \
      | tr '+' '.' \
      | sort -Vr \
      | head -n 1

- component: $CI_SERVER_FQDN/$CI_PROJECT_PATH/custom-release@$CI_COMMIT_SHA
  inputs:
    name: rke2
    command: |
      curl --silent --show-error --location --fail \
          --url "https://api.github.com/repos/rancher/rke2/releases/latest" \
      | jq --raw-output '.tag_name' \
      | sed -E 's/^v([[:digit:]]+\\.[[:digit:]]+\\.[[:digit:]]+)\\+rke2r([[:digit:]]+)$/\\1.\\2/'

- component: $CI_SERVER_FQDN/$CI_PROJECT_PATH/custom-release@$CI_COMMIT_SHA
  inputs:
    name: spark
    command: |
      SPARK_BUILD="$(
          curl --silent --show-error --location --fail "https://ci.lucko.me/job/spark/api/json?pretty=true" \
          | jq --raw-output '.builds[0].number'
      )"
      SPARK_VERSION="$(
          curl -sSLf "https://ci.lucko.me/job/spark/${SPARK_BUILD}/api/json?pretty=true" \
          | jq -r '.artifacts[] | select(.relativePath | endswith("-bukkit.jar")) | .relativePath' \
          | cut -d/ -f4 \
          | cut -d- -f2
      )"
      echo "${SPARK_VERSION}-${SPARK_BUILD}"

- component: $CI_SERVER_FQDN/$CI_PROJECT_PATH/custom-release@$CI_COMMIT_SHA
  inputs:
    name: texlive
    prerequisites: xq
    command: |
      curl --silent --show-error --location --fail \
          --url https://texlive.info/historic/systems/texlive \
      | grep 'href="[0-9]' \
      | sed -E 's/^.+<a href="([^"]+)".+$/\\1/' \
      | cut -d/ -f1 \
      | tail -n 1

- component: $CI_SERVER_FQDN/$CI_PROJECT_PATH/custom-release@$CI_COMMIT_SHA
  inputs:
    name: velocity
    command: |
      curl --silent --show-error --location --fail \
          --url "https://api.github.com/repos/rancher/rke2/releases/latest" \
      | jq --raw-output '.tag_name' \
      | sed -E 's/^v([[:digit:]]+\\.[[:digit:]]+\\.[[:digit:]]+)\\+rke2r([[:digit:]]+)$/\\1.\\2/'
